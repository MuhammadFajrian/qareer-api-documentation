openapi: 3.0.0
info:
  title: Qareer Head Hunter API
  description: 'This is a API documentation server qareer head hunter web application. You can use the api key `special-key` to test the authorization     filters.'
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: https://qareer.com/v1
- url: http://qareer.com/v1
tags:
- name: auth
  description: Everything about authorization and authentication user
- name: users
  description: Operation about user
- name: jobs
  description: Everything about jobs
- name: inquiry
paths:
  /auth/signin:
    post:
      tags:
      - auth
      summary: Sign in user to web application.
      operationId: signinUser
      parameters:
      - name: email
        in: query
        description: The user email for signin
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for signin in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: limit times when token expires
              schema:
                type: integer
                format: int32
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /auth/signup:
    post:
      tags:
      - auth
      summary: Register user to web application.
      operationId: createUserManual
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /auth/linkedin/callback:
    post:
      tags:
      - auth
      summary: Register user to web application using linkedin. {Need Explore}
      operationId: createUserWithLinkedin
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /auth/forgot-password:
    post:
      tags:
      - auth
      summary: Give user access to forgot their password
      operationId: forgotPassword
      parameters:
      - name: email
        in: query
        description: The user email for send link reset password
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: limit times when token expires
              schema:
                type: integer
                format: int32
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /auth/reset-password:
    post:
      tags:
      - auth
      summary: Process reset user password
      operationId: resetPassword
      requestBody: 
        description: UserProfile object that needs to be added to the store
        content: 
          '*/*':
            schema:
              type: object
              properties:
                newPassword: 
                  type: string
                confirmPassword:
                  type: string
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Password doesn't match
          content: {}
  /users/profile:
    post:
      tags:
      - users
      summary: Add a new user detail profile to the zoho
      operationId: addUser
      requestBody:
        description: UserProfile object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserProfile'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      x-codegen-request-body-name: body
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    UserProfile:
      required:
      - name
      - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        profile:
          $ref: '#/components/schemas/CandidateProfile'
        workExperience:
          $ref: '#/components/schemas/CandidateWorkExperience'
        education:
          $ref: '#/components/schemas/CandidateEducation'
        portfolioUrl:
          type: string
      xml:
        name: UserProfile
    CandidateProfile:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        address:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            country:
              type: string
        dateOfBirth:
          type: string
          format: date
      xml:
        name: CandidateProfile
    CandidateWorkExperience:
      type: array
      items:
        type: object
        properties:
          company:
            type: string
          position:
            type: string
          startDate:
            type: object
            properties:
              startMonth:
                type: integer
                format: int32
                example: 1
              startYear:
                type: integer
                format: int32
                example: 2000
          endDate:
            type: object
            properties:
              endMonth:
                type: integer
                format: int32
                example: 12
              endYear:
                type: integer
                format: int32
                example: 2010
          isCurrentWork:
            type: boolean
        xml:
          name: CandidateWorkExperience
      minItems: 1
      maxItems: 2
    CandidateEducation:
      type: array
      items:
        type: object
        properties:
          school:
            type: string
          degree:
            type: string
          major:
            type: string
          startDate:
            type: object
            properties:
              startMonth:
                type: integer
                format: int32
                example: 1
              startYear:
                type: integer
                format: int32
                example: 2000
          endDate:
            type: object
            properties:
              endMonth:
                type: integer
                format: int32
                example: 12
              endYear:
                type: integer
                format: int32
                example: 2010
          isCurrentSchool:
            type: boolean
        xml:
          name: CandidateEducation
      minItems: 1
      maxItems: 2
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
